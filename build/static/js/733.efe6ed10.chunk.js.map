{"version":3,"file":"static/js/733.efe6ed10.chunk.js","mappings":"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","sources":["modules/comic/ComicGenre/GenreDetail.tsx","modules/comic/ComicGenre/GenreList.tsx","modules/comic/pages/GenrePage.tsx"],"sourcesContent":["import React, { FC } from 'react';\r\nimport { makeStyles } from '@mui/styles';\r\nimport { Typography, Box, Pagination, Stack } from '@mui/material';\r\nimport ComicCard from '../ComicList/ComicCard';\r\nimport { IComicInfo } from '../../../models/comic';\r\nimport { IGenreInfo } from '../../../models/genre';\r\nimport { useSearchParams } from 'react-router-dom';\r\ninterface Props {\r\n  comicList?: IComicInfo[];\r\n  genre?: IGenreInfo;\r\n  totalPage?: number;\r\n  handleChangePage(page: number): void;\r\n}\r\n\r\nconst GenreDetail: FC<Props> = ({ comicList, genre, handleChangePage, totalPage }) => {\r\n  const classes = useStyles();\r\n  const [searchParams] = useSearchParams();\r\n  return (\r\n    <div className={classes.genreDetailWrapper}>\r\n      {genre ? (\r\n        <div className={classes.genreDescription}>\r\n          <Typography textAlign=\"center\" variant=\"h4\">\r\n            Truyện thể loại&nbsp;<strong>{genre.name}</strong>\r\n          </Typography>\r\n          <Typography border=\"1px solid #dedede\" borderRadius=\"25px\" p={2} my={2}>\r\n            {genre.description}\r\n          </Typography>\r\n        </div>\r\n      ) : (\r\n        <div className={classes.genreDescription}>\r\n          <Typography textAlign=\"center\" variant=\"h4\">\r\n            Tất cả thể loại\r\n          </Typography>\r\n          <Typography border=\"1px solid #dedede\" borderRadius=\"25px\" p={2} my={2}>\r\n            Tổng hợp tất cả thể loại truyện tranh\r\n          </Typography>\r\n        </div>\r\n      )}\r\n\r\n      <Box display=\"flex\" paddingLeft=\"7px\" flexWrap=\"wrap\">\r\n        {genre\r\n          ? genre.Books?.map((comic: IComicInfo) => {\r\n              return (\r\n                <Box key={comic.id} padding=\"0px 7px\">\r\n                  <ComicCard comic={comic} width=\"150px\" height=\"200px\" sortType=\"popular\" />\r\n                </Box>\r\n              );\r\n            })\r\n          : comicList\r\n          ? comicList.map((comic: IComicInfo) => {\r\n              return (\r\n                <Box key={comic.id} padding=\"0px 7px\">\r\n                  <ComicCard comic={comic} width=\"150px\" height=\"200px\" sortType=\"popular\" />\r\n                </Box>\r\n              );\r\n            })\r\n          : null}\r\n      </Box>\r\n      <Stack\r\n        sx={{\r\n          margin: '15px 0px',\r\n        }}\r\n        spacing={2}\r\n      >\r\n        <Pagination\r\n          page={+searchParams.get('page')! || 1}\r\n          sx={{ display: 'flex', justifyContent: 'center' }}\r\n          onChange={(e, page) => {\r\n            handleChangePage(page);\r\n          }}\r\n          count={totalPage}\r\n        />\r\n      </Stack>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GenreDetail;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  genreDetailWrapper: {\r\n    backgroundColor: theme.palette.background.default,\r\n    padding: theme.spacing(2),\r\n    width: '73%',\r\n  },\r\n  genreDescription: { paddingLeft: '7px', paddingRight: '7px' },\r\n  imageCard: {\r\n    height: '320px',\r\n    width: '240px',\r\n    objectFit: 'cover',\r\n    marginRight: theme.spacing(3),\r\n  },\r\n}));\r\n","import React, { FC } from 'react';\r\nimport { makeStyles } from '@mui/styles';\r\nimport { Typography, Box, Chip, Tooltip, Fade } from '@mui/material';\r\nimport { IGenreInfo } from '../../../models/genre';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { sortObj } from '../../../utils/generalHelpers';\r\n\r\ninterface Props {\r\n  genreList: IGenreInfo[];\r\n}\r\n\r\nconst GenreList: FC<Props> = ({ genreList }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.genreListWrapper}>\r\n      <Typography py=\"10px\" px={1} textAlign=\"center\" variant=\"h4\" borderBottom=\"1px solid #dedede\">\r\n        Thể loại\r\n      </Typography>\r\n      <Box display=\"flex\" pl={2} py={2} borderBottom=\"1px solid #dedede\">\r\n        <NavLink\r\n          style={{ textDecoration: 'none', cursor: 'pointer' }}\r\n          className={(navData) => (navData.isActive ? classes.active : '')}\r\n          to={`/genres`}\r\n          end\r\n        >\r\n          <Chip sx={{ cursor: 'pointer', width: '120px' }} label=\"Tất cả thể loại\" />\r\n        </NavLink>\r\n      </Box>\r\n\r\n      <Box display=\"flex\" pl={2} py={2} flexWrap=\"wrap\" gap={2}>\r\n        {sortObj(genreList, 'name').map((genre: IGenreInfo) => {\r\n          return (\r\n            <React.Fragment key={genre.id}>\r\n              {genre.name.length >= 20 ? (\r\n                <Tooltip\r\n                  classes={{\r\n                    tooltip: classes.customTooltip,\r\n                  }}\r\n                  TransitionComponent={Fade}\r\n                  TransitionProps={{ timeout: 600 }}\r\n                  placement=\"top\"\r\n                  title={genre.name}\r\n                >\r\n                  <NavLink\r\n                    style={{ width: '45%', textDecoration: 'none', cursor: 'pointer' }}\r\n                    className={(navData) => (navData.isActive ? classes.active : '')}\r\n                    to={`${genre.id!}`}\r\n                  >\r\n                    <Chip sx={{ width: '100%', cursor: 'pointer' }} label={genre.name} color=\"primary\" />\r\n                  </NavLink>\r\n                </Tooltip>\r\n              ) : (\r\n                <NavLink\r\n                  style={{ width: '45%', textDecoration: 'none', cursor: 'pointer' }}\r\n                  className={(navData) => (navData.isActive ? classes.active : '')}\r\n                  to={`/genres/${genre.id!}`}\r\n                >\r\n                  <Chip sx={{ width: '100%', cursor: 'pointer' }} label={genre.name} />\r\n                </NavLink>\r\n              )}\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GenreList;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  genreListWrapper: {\r\n    backgroundColor: theme.palette.background.default,\r\n    padding: theme.spacing(2),\r\n    width: '27%',\r\n    border: '1px solid #fff',\r\n    borderRadius: '25px',\r\n  },\r\n  customTooltip: {\r\n    backgroundColor: '#e3f2fd',\r\n    fontSize: '14px',\r\n    color: theme.palette.text.primary,\r\n  },\r\n  imageCard: {\r\n    height: '320px',\r\n    width: '240px',\r\n    objectFit: 'cover',\r\n    marginRight: theme.spacing(3),\r\n  },\r\n  active: {\r\n    backgroundColor: theme.palette.primary.main,\r\n    borderRadius: '16px',\r\n    // borderRadius: '16px',\r\n    // display: 'inline-flex',\r\n    // width: 'fit-content',\r\n    // textAlign: 'center',\r\n    // flexDirection: 'row',\r\n    // alignItems: 'center',\r\n    // justifyContent: 'center',\r\n    // height: '32px',\r\n    // backgroundColor: theme.palette.primary.main,\r\n    // transition:\r\n    //   'background-color 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',\r\n  },\r\n}));\r\n","import React, { FC, useState, useCallback, useEffect } from 'react';\r\nimport ComicLayout from '../../../layout/ComicLayout';\r\nimport { Box, Pagination, Stack } from '@mui/material';\r\nimport { makeStyles } from '@mui/styles';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Action } from 'redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\n\r\nimport GenreDetail from '../ComicGenre/GenreDetail';\r\nimport GenreList from '../ComicGenre/GenreList';\r\nimport { IComicInfo } from '../../../models/comic';\r\nimport { fetchThunk } from '../common/redux/thunk';\r\nimport { API_PATHS } from '../../../configs/api';\r\nimport { IGenreInfo } from '../../../models/genre';\r\nimport { createSearchParams, useNavigate, useParams, useSearchParams } from 'react-router-dom';\r\nimport { AppState } from '../../../redux/reducer';\r\nimport Loader from '../../../components/Loader';\r\nimport { setGenreListInfo } from '../common/redux/comicReducer';\r\n\r\ninterface Props {}\r\n\r\nconst GenrePage: FC<Props> = () => {\r\n  const [comicList, setComicList] = useState<IComicInfo[]>([]);\r\n  const [genreList, setGenreList] = useState<IGenreInfo[]>([]);\r\n  const [totalPage, setTotalPage] = useState(1);\r\n  const [genre, setGenre] = useState<IGenreInfo>();\r\n  const [searchParams] = useSearchParams();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const { id } = useParams();\r\n  const dispatch = useDispatch<ThunkDispatch<AppState, null, Action<string>>>();\r\n  const navigate = useNavigate();\r\n  const classes = useStyles();\r\n  const handleChangePage = (page: number) => {\r\n    const pageObj = { page: page.toString() };\r\n    navigate({\r\n      search: createSearchParams(pageObj).toString(),\r\n    });\r\n  };\r\n  const getAllComic = useCallback(async () => {\r\n    const page = searchParams.get('page') || 1;\r\n    setIsLoading(true);\r\n    const json = await dispatch(fetchThunk(`${API_PATHS.allBooks}?page=${page}`, 'get'));\r\n    setIsLoading(false);\r\n    setTotalPage(json.totalPage);\r\n    setComicList([...json.data]);\r\n  }, [dispatch, searchParams]);\r\n\r\n  const getAllGenres = useCallback(async () => {\r\n    setIsLoading(true);\r\n    const json = await dispatch(fetchThunk(API_PATHS.allGenres, 'get'));\r\n    setIsLoading(false);\r\n    setGenreList([...json.data]);\r\n    dispatch(setGenreListInfo([...json.data]));\r\n  }, [dispatch]);\r\n\r\n  const getGenreById = useCallback(async () => {\r\n    const page = searchParams.get('page') || 1;\r\n    setIsLoading(true);\r\n    const json = await dispatch(fetchThunk(`${API_PATHS.genreById}/${id}?page=${page}`, 'get'));\r\n    setIsLoading(false);\r\n    setTotalPage(json.totalPage);\r\n    setGenre({ ...json.data[0] });\r\n  }, [dispatch, id, searchParams]);\r\n\r\n  useEffect(() => {\r\n    if (!id) {\r\n      getAllComic();\r\n      setGenre(undefined);\r\n    } else getGenreById();\r\n    getAllGenres();\r\n  }, [getAllGenres, getAllComic, id, getGenreById, searchParams]);\r\n  return (\r\n    <>\r\n      <ComicLayout background=\"background.neutral\" isReadScreen={false}>\r\n        {isLoading && <Loader />}\r\n        <div className={classes.root}>\r\n          <Box display=\"flex\" mt={3} alignItems=\"flex-start\" justifyContent=\"space-between\" gap={2}>\r\n            {!genre ? (\r\n              <GenreDetail totalPage={totalPage} handleChangePage={handleChangePage} comicList={comicList} />\r\n            ) : (\r\n              <GenreDetail totalPage={totalPage} handleChangePage={handleChangePage} genre={genre} />\r\n            )}\r\n            <GenreList genreList={genreList} />\r\n          </Box>\r\n        </div>\r\n      </ComicLayout>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GenrePage;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '1200px',\r\n    margin: '0 auto',\r\n    paddingTop: '88px ',\r\n    paddingBottom: '28px',\r\n    position: 'relative',\r\n  },\r\n}));\r\n"],"names":["comicList","genre","handleChangePage","totalPage","classes","useStyles","useSearchParams","searchParams","className","genreDetailWrapper","genreDescription","Typography","textAlign","variant","name","border","borderRadius","p","my","description","Box","display","paddingLeft","flexWrap","Books","map","comic","padding","ComicCard","width","height","sortType","id","Stack","sx","margin","spacing","Pagination","page","get","justifyContent","onChange","e","count","makeStyles","theme","backgroundColor","palette","background","default","paddingRight","imageCard","objectFit","marginRight","genreList","genreListWrapper","py","px","borderBottom","pl","style","textDecoration","cursor","navData","isActive","active","to","end","Chip","label","gap","sortObj","length","Tooltip","tooltip","customTooltip","TransitionComponent","Fade","TransitionProps","timeout","placement","title","color","fontSize","text","primary","main","useState","setComicList","setGenreList","setTotalPage","setGenre","isLoading","setIsLoading","useParams","dispatch","useDispatch","navigate","useNavigate","pageObj","toString","search","createSearchParams","getAllComic","useCallback","fetchThunk","API_PATHS","json","data","getAllGenres","setGenreListInfo","getGenreById","useEffect","undefined","ComicLayout","isReadScreen","Loader","root","mt","alignItems","paddingTop","paddingBottom","position"],"sourceRoot":""}